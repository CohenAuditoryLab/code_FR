%
%function [taxis,faxis,S,Sf]=audiogram(data,Fs,dX,f1,fN,dis,ATT)
%	
%	FILE NAME 	: AUDIOGRAM SPECTRUM
%	DESCRIPTION : Sound Spectrum obtained by applying a octave spaced 
%                 filterbank
%
%	data    : Input data
%	Fs		: Sampling Rate
%	dX		: Spectral Filter Bandwidth Resolution in Octaves
%			  Usually a fraction of an octave ~ 1/8 would allow 
%			  for a spectral envelope resolution of up to 4 
%			  cycles per octave
%			  Note that X=log2(f/f1) as defined for the ripple 
%			  representation 
%	f1		: Lower frequency to compute spectral decomposition
%	fN		: Upper freqeuncy to compute spectral decomposition
%	Fm		: Maximum Modulation frequency allowed for temporal
%			  envelope at each band. If Fm==inf full range of Fm is used.
%	OF		: Oversampling Factor for temporal envelope
%			  Since the maximum frequency of the envelope is 
%			  Fm, the Nyquist Frequency is 2*Fm
%			  The Frequency used to sample the envelope is 
%			  2*Fm*OF
%	dis		: display (optional): 'log' or 'lin' or 'n'
%			  Default == 'n'
%	ATT		: Attenution / Sidelobe error in dB (Optional)
%			  Default == 60 dB
%
%RETURNED VARIABLES
%
%   taxis   : Time axis
%   faxis   : Frequency axis
%   S       : Audiogram
%   Sf      : Spectral Envelope Distribution
%
% (C) Monty A. Escabi, January 2008
%
function [taxis,faxis,S,Sf]=audiogram(data,Fs,dX,f1,fN,Dis,ATT)

%Input Parameters
if nargin<8
	Dis='n';
end
if nargin<9
	ATT=60;
end

%Finding frequency axis for chromatically spaced filter bank
%Note that chromatic spacing requires : f(k) = f(k+1) * 2^dX
X1=0;
XN=log2(fN/f1);
L=floor(XN/dX);
Xc=(.5:L-.5)/L*XN;
fc=f1*2.^Xc;

%Finding filter characterisitic frequencies according to Greenwood
%[fc]=greenwoodfc(20,20000,.1);

%Finding filter bandwidhts assuming 1 critical band
BW=criticalbandwidth(fc);

%Temporal Down Sampling Factor
DF=ceil(Fs/2/Fm/OF);

%Desining Low Pass Filter for Extracting Envelope
He=lowpass(Fm,.25*Fm,Fs,ATT,'n');
Ne=(length(He)-1)/2;

%Generating Gammatone Filters
for k=1:length(fc)
    [GammaTone(k).H]=gammatonefilter(3,BW(k),fc(k),Fs);
    N(k)=(length(GammaTone(k).H)-1)/2;
end

%FFT Size
NFFT=2 ^ nextpow2( length(data) + max(N)*2+1 +Ne*2+1)

%Filtering data, Extracting Envelope, and Down-Sampling
for k=1:length(fc)

	%Output Display
	clc,disp(['Filtering band ' int2str(k) ' of ' int2str(length(fc))]) 

	%Gamma Tone Filter
    H=GammaTone(k).H;
    H=H/sqrt(sum(H.^2));    %Equal Energy

	%Filtering at kth Scale
	Y=convfft(data',H,0,NFFT,'y');      %Changed delayed from N(k) to zero
     
    %Spectral Amplitude Distribution
    %Sf(k)=std(Y);
    
	%Finding Envelope Using the Hilbert Transform
	Y=abs(hilbert(Y));

	%Filtering The Envelope and Downsampling
    if Fm~=inf
        Y=max(0,convfft(Y,He,Ne));      %Remove (-) values which are due to filtering
    end
    
	%Downsampling Envelope
    S(k,:)=Y(1:DF:length(Y));
    
    %Spectral Envelope Distribution
    %Sf(k)=sqrt(mean(Y.^2));
    Sf(k)=sum(S(k,:));
    
end
taxis=(0:size(S,2)-1)/(Fs/DF);
faxis=fc;